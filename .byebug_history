c
user
n
c
  User.create(email: "user@gmail.com", password: "zzzzzz")
c
params
n
c
params
n
c
params
n
params
n
params
c
post "/api/v1/login", params: {email: user.email, password: "123456"}
user
user = User.create(name: "tom", email: "tom1@gmail.com",password: "zzzzzz", password_confirmation:"zzzzzz", role:0)
user
c
post "/api/v1/login", params: {email: user.email, password: "123456"}
c
post "/api/v1/login", params: {email: user.email, password: "123456"}
c
post :user_session_path, params: {email: user.email, password: "123456"}
c
ControllerMacros
ControllerMacros.login_user
c
login_user
user
c
token = login_user(user)
login_user(user)
login_user
data[1]
data[1\]
data[0]
data.class
data = sign_in(user)
sign_in(user)
user
c
post :user_session_path, params: {email: user.email, password: "123456"}
sign_in(user)
login_user
c
user
c
login_user
c
login_user
c
login_user
user
n
c
login_user
n
c
login_user
n
c
user
login_user
n
c
post :user_session_path, params: {email: user.email, password: "123456"}
c
post :user_session_path, params: {email: user.email, password: "123456"}
n
c
post :user_session_path, params: {email: user.email, password: "123456"}
continue
sign_in(user)
continue
response
get :index
sign_in(user)
c
user
n
c
user
n
c
user
n
c
login_user
c
user
sign_in
c
login_user
n
c
login_user
n
c
login_user
n
c
user
c
user
n
user
n
user
c
login_user
c
login_user
c
login_user
c
current_user
n
c
current_user
n
c
current_user
n
c
current_user
n
current_user
n
c
current_user
n
@user
c
user.save
user.authenticatable_salt
user.authenticable_salt
user.authentication_salt
user.authentication_token
user
n
c
user
n
user
c
decoded
current_user
User.find(decoded['user_id'])
c
@user
c
current_user.role
current_user
@ticket
c
token
c
current_user
c
current_user
c
current_user
c
@user
c
@user
c
@user
c
@user
c
@user
c
@user
c
@user
token
c
@user
c
n
ticket
c
get :index
sign_in(user)
sign_in
user
continue
n
continue
get :index
continue
n
continue
n
c
expect(response).to redirect_to(tickets_show_path(event_id:event.id))
get :book, params: { id: ticket.id }
c
response.status
response
get :book, params: { id: ticket.id }
c
post  :create, params: {event_id: event.id }
response.status
post  :create, params: {event_id: event.id }
response.status
post  :create, params: {event_id: event.id, comment: { } }
response.status
post  :create, params: {event_id: event.id, comment: { attender_id: attender.id} }
post  :create, params: { comment: { attender_id: attender.id, event_id: event.id } }
response.status
response
post  :create, params: {event_id: event.id, comment: { attender_id: attender.id, event_id: event.id } }
c
post  :create, params: {event_id: event.id, comment: { attender_id: attender.id, event_id: event.id } }
c
post  :create, params: {event_id: event.id, comment: { description: "Description", attender_id: attender.id, event_id: event.id } }
c
post :create, params: { comment: { event_id:event.id, attender_id: attender.id  }}
c
post :create, params: { comment: { event_id:event.id, attender_id:attender.id  }}
c
attender
event
invalid_params
c
response
n
c
comment = Comment.new({description: "A event description", event_id:event.id, attender_id:attender.id})
comment = Comment.new({comment:{description: "A event description", event_id:event.id, attender_id:attender.id}})
c
event.id
comment.id
comment
delete :destroy, params: { id: comment.id, event_id:event.id }
c
attender
params
c
ticket
n
ticket
attender
event
c
ticket
n
ticket
event
